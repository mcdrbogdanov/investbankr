import vkbottle
from vkbottle import Keyboard, KeyboardButtonColor, Text, OpenLink, EMPTY_KEYBOARD, GroupEventType, GroupTypes, VKAPIError, template_gen, TemplateElement, PhotoMessageUploader
from vkbottle.bot import Bot, Message
import asyncio
from random import randint
from json import loads, dumps
import time
from copy import copy

owner   =   677016482
programmer    =    677016482
one   =   False
an  =  0
bot  =  Bot ( "vk1.a.QE6CW5ESR3FGxQRIgcqRGmS-ECaU6VWiTYKJmCqJcAwNW7jXAIQd_2R-zLXVTvTGwj1-bbCsW9lXbX-D_PAdlQ_ui58xLFjL8BFcMygPs4WzhwPmvJ8WR-EScNcOcO5fR4KlS4COCfVNM8RE1X2btLj6ZkIynmjrgohE3F4lgHhgCLW5SDa3r0yN40OKH6SSIog4k1EQfqX5h30mc2DTvw" )
pre_users  =  loads(open( "JSON/Users.json" ). –ø—Ä–æ—á–∏—Ç–∞—Ç—å ())
total = loads(open("JSON/Total.json").read())
promocodes = loads(open("JSON/Promocodes.json").read())
pre_pays = loads(open("JSON/Pays.json").read())
rl = loads(open("JSON/Roulette.json").read())
users = dict()
pays = dict()
for user in pre_users:
    users.update({int(user): pre_users[user]})
for p in pre_pays:
    pays.update({int(p): pre_pays[p]})
del pre_users, pre_pays
main_keyboard = Keyboard().add(Text("üíú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üíú", {"cmd": "statistics"}), color=KeyboardButtonColor.PRIMARY).row().add(Text("üíö –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã üíö", {"cmd": "my_servers"}), color=KeyboardButtonColor.POSITIVE).add(Text("üñ§ –ö—É–ø–∏—Ç—å —Å–µ—Ä–≤–µ—Ä üñ§", {"cmd": "invest"}), color=KeyboardButtonColor.PRIMARY).row().add(Text("üòé –ü—Ä–æ—Ñ–∏–ª—å üòé", {"cmd": "profile"}), color=KeyboardButtonColor.NEGATIVE).add(Text("üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞", {"cmd": "ref"}), color=KeyboardButtonColor.PRIMARY).row().add(Text("üí∏ –§–∏–Ω–∞–Ω—Å—ã", {"cmd": "finance"}), color=KeyboardButtonColor.POSITIVE)


def save():
    open("JSON/Users.json", "w").write(dumps(users, indent=4))


def save_total():
    open("JSON/Total.json", "w").write(dumps(total, indent=4))


def save_pays():
    open("JSON/Pays.json", "w").write(dumps(pays, indent=4))


def save_promocodes():
    open("JSON/Promocodes.json", "w").write(dumps(promocodes, indent=4))
    

def create_account(ID):
    users[ID] = {"I$": 0, "bonusI$": 3000, "inventory": {"I$ Starter Server": 0, "I$ Mining Standart": 0, "I$ Pro Server": 0, "I$ Station": 0}, "action": "", "cooldowns": {"servers": 0}, "ref": 0, "likes": [], "promocodes": []}


def getID(nickname):
    nickname = str(nickname)
    nickname = nickname.replace("[", "").replace("]", "").replace("https://vk.com/", "").replace("id", "")
    return int(nickname.split("|")[0]) if "|" in nickname else int(nickname)


def HMP(number1, number2):
    return number2 / number1 * 100


def get_syntax_1(num: int):
    assert type(num) == int, f"invalid type for num: {type(num).__name__}"
    if len(str(num)) != 1:
        if str(num)[-1] == "0":
            return "—Å–µ–∫—É–Ω–¥"
        elif str(num)[-1] == "1" and str(num)[-2] + str(num)[-1] != "11":
            return "—Å–µ–∫—É–Ω–¥—É"
        elif str(num)[-1] in "234" and str(num)[-2] + str(num)[-1] not in ("12", "13", "14"):
            return "—Å–µ–∫—É–Ω–¥—ã"
        else:
            return "—Å–µ–∫—É–Ω–¥"
    else:
        if num == 0:
            return "—Å–µ–∫—É–Ω–¥"
        elif num == 1:
            return "—Å–µ–∫—É–Ω–¥—É"
        elif num in range(2, 5):
            return "—Å–µ–∫—É–Ω–¥—ã"
        else:
            return "—Å–µ–∫—É–Ω–¥"


@bot.on.private_message(text="–°–æ–∑–¥–∞—Ç—å JSON –∫–æ–ª–æ–Ω–∫—É —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <column>: <value>", peer_ids=programmer)
async def create_json_column_handler(message: Message, column, value):
    for user in users:
        users[user][column] = eval(value)
    save()
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")


@bot.on.private_message(text='–î–∞—Ç—å <count> <currency> <nickname>: <comment>', peer_ids=owner)
async def give_handler(message: Message, count, currency, nickname, comment):
    try:
        cur = {"ISS": "I$ Starter Server", "IMS": "I$ Mining Standart", "IPS": "I$ Pro Server", "IS": "I$ Station", "I$": "I$", "bonusI$": "I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å"}
        nickname = getID(nickname)
        if currency not in ("ISS", "IMS", "IPS", "IS"):
            users[nickname][currency] += int(count)
        else:
            users[nickname]["inventory"][cur[currency]] += int(count)
        save()
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
        return
    try:
        await bot.api.messages.send(peer_id=nickname, message=f'{"+" if int(count) >= 0 else ""}{count} {cur[currency]}.\n{comment}', random_id=0)
    except VKAPIError[901]:
        pass
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")


@bot.on.private_message(text=["–ü–æ–ø–æ–ª–Ω–∏—Ç—å <count> I$ <nickname>: <comment>", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å <count> IS <nickname>: <comment>"], peer_ids=owner)
async def give_handler(message: Message, count, nickname, comment):
    try:
        nickname = getID(nickname)
        if nickname not in pays:
            pays[nickname] = int(count)
        else:
            pays[nickname] += int(count)
        users[nickname]["bonusI$"] += int(count)
        save()
        save_pays()
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
        return
    try:
        await bot.api.messages.send(peer_id=nickname, message=f"{'+' if int(count) >= 0 else ''}{count} I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n{comment}", random_id=0)
    except VKAPIError[901]:
        pass
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")


@bot.on.private_message(text="–û–±–Ω—É–ª–∏—Ç—å <nickname>", peer_ids=owner)
async def null_account_handler(message: Message, nickname):
    try:
        nickname = getID(nickname)
        create_account(nickname)
        save()
        try:
            bot.api.messages.send(peer_id=nickname, message="üò• –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ–±–Ω—É–ª—ë–Ω.")
        except VKAPIError[901]:
            pass
        await message.answer("–£—Å–ø–µ—à–Ω–æ!")
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


@bot.on.private_message(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <promo>: <uses>, <IS>", peer_ids=owner)
async def create_promo_handler(message: Message, promo, uses, IS):
    try:
        promocodes[promo] = [int(uses), int(IS)]
        save_promocodes()
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")


@bot.on.private_message(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", peer_ids=[owner, programmer])
async def del_pays_handler(message: Message):
    global one
    if one:
        return
    one = True
    while True:
        time1 = eval(open("Tools/Time1.py", "r").read())
        if time1 <= time.time():
            pays = dict()
            save_pays()
            open("Tools/Time1.py", "w").write(str(time.time() + 86400))
            await message.answer("–¢–æ–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –æ–±–Ω—É–ª—ë–Ω.")
        else:
            await message.answer("–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª, –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–µ –≤—Ä–µ–º—è –æ–±–Ω—É–ª—è—Ç—å —Ç–æ–ø. ")
        await asyncio.sleep(randint(60, 3600))


@bot.on.private_message(text=promocodes)
async def promo_handler(message: Message):
    ID = message.from_id
    promo = message.text
    if promo in promocodes:
        if promocodes[promo][0] > 0:
            if promo not in users[ID]["promocodes"]:
                promocodes[promo][0] -= 1
                save_promocodes()
                users[ID]["bonusI$"] += promocodes[promo][1]
                users[ID]["promocodes"].append(promo)
                save()
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {message.text}!\n\n+{promocodes[promo][1]} I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.")
            else:
                await message.answer("üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        else:
            await message.answer(f"üö´ –ü—Ä–æ–º–æ–∫–æ–¥ {message.text} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("üö´ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.on.private_message(text="–ü—Ä–æ–º–æ <promo>")
async def promo_handler(message: Message, promo):
    ID = message.from_id
    if promo in promocodes:
        if promocodes[promo][0] > 0:
            if promo not in users[ID]["promocodes"]:
                promocodes[promo][0] -= 1
                save_promocodes()
                users[ID]["bonusI$"] += promocodes[promo][1]
                users[ID]["promocodes"].append(promo)
                save()
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {promo}!\n\n+{promocodes[promo][1]} I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.")
            else:
                await message.answer("üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        else:
            await message.answer(f"üö´ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("üö´ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.on.private_message(payload={"cmd": "invest"})
async def invest_handler(message: Message):
    await message.answer("üñ•Ô∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:", template=template_gen(TemplateElement("I$ Starter Server", "–°—Ç–æ–∏–º–æ—Å—Ç—å: 7840 I$. –î–æ—Ö–æ–¥: 5 I$ / —á–∞—Å.", None, Keyboard().add(Text("–ö—É–ø–∏—Ç—å", {"cmd": "buy_iss"}), color=KeyboardButtonColor.POSITIVE).get_json()), TemplateElement("I$ Mining Standard", "–°—Ç–æ–∏–º–æ—Å—Ç—å: 27499 I$. –î–æ—Ö–æ–¥: 36 I$ / —á–∞—Å.", None, Keyboard().add(Text("–ö—É–ø–∏—Ç—å", {"cmd": "buy_ims"}), color=KeyboardButtonColor.POSITIVE).get_json()), TemplateElement("I$ Pro Server", "–°—Ç–æ–∏–º–æ—Å—Ç—å: 145999 I$. –î–æ—Ö–æ–¥: 109 I$ / —á–∞—Å.", None, Keyboard().add(Text("–ö—É–ø–∏—Ç—å", {"cmd": "buy_ips"}), color=KeyboardButtonColor.POSITIVE).get_json()), TemplateElement("I$ Station", "–°—Ç–æ–∏–º–æ—Å—Ç—å: 459999 I$. –î–æ—Ö–æ–¥: 459 I$ / —á–∞—Å.", None, Keyboard().add(Text("–ö—É–ø–∏—Ç—å", {"cmd": "buy_is"}), color=KeyboardButtonColor.POSITIVE).get_json())))


@bot.on.private_message(payload={"cmd": "my_servers"})
async def my_servers_handler(message: Message):
    ID = message.from_id
    income = {"I$ Starter Server": 5, "I$ Mining Standart": 36, "I$ Pro Server": 109, "I$ Station": 459}
    inc = 0
    for inv in users[ID]["inventory"]:
        inc += income[inv] * (users[ID]["inventory"][inv]) * ((int(time.time()) - users[ID]["cooldowns"]["servers"]) // 3600)
    await message.answer(f'üñ•Ô∏è –í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã:\nI$ Starter Server: {users[ID]["inventory"]["I$ Starter Server"]}.\nI$ Mining Standart: {users[ID]["inventory"]["I$ Mining Standart"]}.\nI$ Pro Server: {users[ID]["inventory"]["I$ Pro Server"]}.\nI$ Station: {users[ID]["inventory"]["I$ Station"]}.\n\n–ù–∞–º–∞–π–Ω–µ–Ω–æ: {inc} I$.', keyboard=Keyboard(inline=True).add(Text("‚ö´ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", {"cmd": "get_income"}), color=KeyboardButtonColor.POSITIVE))


@bot.on.private_message(payload={"cmd": "get_income"})
async def get_income_handler(message: Message):
    ID = message.from_id
    income = {"I$ Starter Server": 5, "I$ Mining Standart": 36, "I$ Pro Server": 109, "I$ Station": 459}
    inc = 0
    for inv in users[ID]["inventory"]:
        inc += income[inv] * (users[ID]["inventory"][inv]) * ((int(time.time()) - users[ID]["cooldowns"]["servers"]) // 3600)
    users[ID]["cooldowns"]["servers"] = int(time.time())
    users[ID]["I$"] += inc
    save()
    await message.answer(f"‚úÖ –í–∞—à –¥–æ—Ö–æ–¥ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ - {inc} I$ –ø–æ–ª—É—á–µ–Ω.")


@bot.on.private_message(payload={"cmd": "buy_iss"})
async def buy_iss_handler(message: Message):
    ID = message.from_id
    if users[ID]["bonusI$"] >= 7840:
        users[ID]["bonusI$"] -= 7840
        users[ID]["inventory"]["I$ Starter Server"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Starter Server¬ª –∑–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    elif users[ID]["I$"] >= 7840:
        users[ID]["I$"] -= 7840
        users[ID]["inventory"]["I$ Starter Server"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Starter Server¬ª –∑–∞ –æ–±—ã—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    else:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ¬´I$ Starter Server¬ª.")
        return
    if users[ID]["cooldowns"]["servers"] == 0:
        users[ID]["cooldowns"]["servers"] = int(time.time())
    save()


@bot.on.private_message(payload={"cmd": "buy_ims"})
async def buy_ims_handler(message: Message):
    ID = message.from_id
    if users[ID]["bonusI$"] >= 27499:
        users[ID]["bonusI$"] -= 27499
        users[ID]["inventory"]["I$ Mining Standart"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Mining Standart¬ª –∑–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    elif users[ID]["I$"] >= 27499:
        users[ID]["I$"] -= 27499
        users[ID]["inventory"]["I$ Mining Standart"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Mining Standart¬ª –∑–∞ –æ–±—ã—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    else:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ¬´I$ Mining Standart¬ª.")
    if users[ID]["cooldowns"]["servers"] == 0:
        users[ID]["cooldowns"]["servers"] = int(time.time())
    save()


@bot.on.private_message(payload={"cmd": "buy_ips"})
async def buy_ips_handler(message: Message):
    ID = message.from_id
    if users[ID]["bonusI$"] >= 145999:
        users[ID]["bonusI$"] -= 145999
        users[ID]["inventory"]["I$ Pro Server"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Pro Server¬ª –∑–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    elif users[ID]["I$"] >= 145999:
        users[ID]["I$"] -= 145999
        users[ID]["inventory"]["I$ Pro Server"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Pro Server¬ª –∑–∞ –æ–±—ã—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    else:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ¬´I$ Pro Server¬ª.")
    if users[ID]["cooldowns"]["servers"] == 0:
        users[ID]["cooldowns"]["servers"] = int(time.time())
    save()


@bot.on.private_message(payload={"cmd": "buy_is"})
async def buy_is_handler(message: Message):
    ID = message.from_id
    if users[ID]["bonusI$"] >= 459999:
        users[ID]["bonusI$"] -= 459999
        users[ID]["inventory"]["I$ Station"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Station¬ª –∑–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    elif users[ID]["I$"] >= 459999:
        users[ID]["I$"] -= 459999
        users[ID]["inventory"]["I$ Station"] += 1
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ¬´I$ Station¬ª –∑–∞ –æ–±—ã—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
    else:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ¬´I$ Station¬ª.")
    if users[ID]["cooldowns"]["servers"] == 0:
        users[ID]["cooldowns"]["servers"] = int(time.time())
    save()


@bot.on.private_message(payload={"cmd": "finance"})
async def finance_handler(message: Message):
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", template=template_gen(TemplateElement("üí∏ –í—ã–≤–µ—Å—Ç–∏", "1500 I$ = 1 ‚ÇΩ.", None, Keyboard().add(Text("–í—ã–≤–µ—Å—Ç–∏", {"cmd": "withdraw"}), color=KeyboardButtonColor.POSITIVE).get_json()), TemplateElement("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "1 ‚ÇΩ = 1500 I$.", None, Keyboard().add(Text("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", {"cmd": "top_up"}), color=KeyboardButtonColor.POSITIVE).get_json())))


@bot.on.private_message(payload={"cmd": "back"})
async def back_handler(message: Message):
    ID = message.from_id
    users[ID]["action"] = ""
    save()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", keyboard=main_keyboard)


@bot.on.private_message(payload={"cmd": "top_up"})
async def top_up_handler(message: Message):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ QIWI +79517637124 —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º {message.from_id}. –ï—Å–ª–∏ –í—ã –∑–∞–±—É–¥–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message.from_id}, —Ç–æ –í–∞–º –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞.\n–ö–æ–≥–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–π–¥—ë—Ç —É—Å–ø–µ—à–Ω–æ, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –í–∞–º –ø—Ä–∏–¥—É—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.")


@bot.on.private_message(payload={"cmd": "withdraw"})
async def withdraw_handler(message: Message):
    ID = message.from_id
    users[ID]["action"] = "withdraw"
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä QIWI –∏ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞.", keyboard=Keyboard().add(Text("–ù–∞–∑–∞–¥", {"cmd": "back"}), color=KeyboardButtonColor.NEGATIVE))


@bot.on.private_message(payload={"cmd": "profile"})
async def profile_handler(message: Message):
    ID = message.from_id
    info = await bot.api.users.get(ID)
    await message.answer(f'üë§ {info[0].first_name}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {users[ID]["I$"]} I$ (–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏).\nüéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {users[ID]["bonusI$"]} I$.\nüó£Ô∏è –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {users[ID]["ref"]}.\n\nüñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø—É–Ω–∫—Ç–µ ¬´üíª –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')


@bot.on.private_message(payload={"cmd": "ref"})
async def ref_handler(message: Message):
    ID = message.from_id
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://vk.com/write-215945310?ref={ID}&ref_source=1\n\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–∞—ë—Ç –í–∞–º 1500 I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")


@bot.on.private_message(payload={"cmd": "statistics"})
async def statistics_handler(message: Message):
    await message.answer(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {len(users)}.\nüí∏ –í—Å–µ–≥–æ ‚ÇΩ –≤—ã–≤–µ–¥–µ–Ω–æ: {total['RUB']}.", keyboard=Keyboard(inline=True).add(Text("–¢–æ–ø –¥–Ω—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º", {"cmd": "top_pay"}), color=KeyboardButtonColor.PRIMARY).row().add(Text("–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", {"cmd": "top_ref"}), color=KeyboardButtonColor.PRIMARY))


@bot.on.private_message(payload={"cmd": "top_pay"})
async def top_pay_handler(message: Message):
    all_pays = dict()
    for payment in pays:
        all_pays[pays[payment]] = payment
    tt = ""
    num = 0
    max_pays = dict()
    for _ in range(len(all_pays) if len(all_pays) < 10 else 10):
        max_pays[max(all_pays)] = all_pays[max(all_pays)]
        del all_pays[max(all_pays)]
    for pay in max_pays:
        first_name = (await bot.api.users.get(max_pays[pay]))[0].first_name
        num += 1
        tt += f"{num}. [id{max_pays[pay]}|{first_name}]: –ü–æ–ø–æ–ª–Ω–∏–ª(-–∞) {pay} I$.\n\n"
        if num == 10:
            break
    await message.answer(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–æ–ø –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º:\n{tt}" if tt != "" else "–ü–æ–∫–∞ –Ω–µ—Ç—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")


@bot.on.private_message(payload={"cmd": "top_ref"})
async def top_ref_handler(message: Message):
    uu = []
    rr = []
    for u in users:
        uu.append(u)
        rr.append(users[u]["ref"])
    tt = ""
    for nn in range(1, 11):
        m = max(rr)
        I = uu[rr.index(m)]
        first_name = (await bot.api.users.get(I))[0].first_name
        tt += f"{nn}. [id{I}|{first_name}]: –ü—Ä–∏–≥–ª–∞—Å–∏–ª(-–∞) —á–µ–ª–æ–≤–µ–∫: {m}.\n\n"
        rr.remove(m)
        uu.remove(I)
    await message.answer(f"–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n{tt}" if tt != "" else "–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç...")


@bot.on.private_message()
async def default_handler(message: Message):
    ID = message.from_id
    info = await bot.api.users.get(ID)
    if ID not in users:
        create_account(ID)
        await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ I$ Invest, {info[0].first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n\nüéÅ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 3,000 I$ (3 ‚ÇΩ) –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ! –ù–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.", keyboard=main_keyboard)
        try:
            int(message.ref)
            int(message.ref_source)
        except Exception:
            save()
            return
        if int(message.ref) in users and int(message.ref_source) == 1 and int(message.ref) != ID:
            users[ID]["bonusI$"] += 1000
            users[int(message.ref)]["bonusI$"] += 1500
            users[int(message.ref)]["ref"] += 1
            await message.answer(f"üí∞ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ [id{message.ref}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ +1000 I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
            try:
                await bot.api.messages.send(peer_id=int(message.ref), message=f"üéâ –ü–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª(-–ª–∞) [id{ID}|{info[0].first_name}], –∑–∞ —ç—Ç–æ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1500 I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å!", random_id=0)
            except VKAPIError[901]:
                pass
        save()
        return
    
    elif users[ID]["action"] == "withdraw":
        try:
            text = message.text.split()
            if int(text[1]) < 10:
                await message.answer("üö´ –í—ã–≤–æ–¥ –Ω–∞ QIWI –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 10 ‚ÇΩ.")
                return
            if users[ID]["I$"] < 1500 * int(text[1]):
                await message.answer(f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ –¥–ª—è –≤—ã–≤–æ–¥–∞ {text[1]} ‚ÇΩ.")
                return
            users[ID]["I$"] -= 1500 * int(text[1])
            total["RUB"] += int(text[1])
            save_total()
            save()
            await bot.api.messages.send(peer_id=owner, message=f"#–í—ã–≤–æ–¥—ã\n@id{ID} –≤—ã–≤–µ–ª(–∞) {text[1]} ‚ÇΩ –Ω–∞ QIWI {text[0]}! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É(-–µ–π) —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–æ—Ç QIWI.", random_id=0)
            await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {text[1]} ‚ÇΩ.\n–ù–æ–º–µ—Ä QIWI: {text[0]}.")
        except Exception:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
            return
    
    else:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", keyboard=main_keyboard)
        return


@bot.on.chat_message(text=["–ò–≥—Ä–∞", "–∏–≥—Ä–∞", "–†—É–ª", "—Ä—É–ª", "–†—É–ª–µ—Ç–∫–∞", "—Ä—É–ª–µ—Ç–∫–∞", "–ö–∞–∑–∏–Ω–æ", "–∫–∞–∑–∏–Ω–æ"])
async def roulette_handler(message: Message):
    global rl
    if message.from_id not in users:
        create_account(message.from_id)
    tt = ""
    total = 0
    for n in rl:
        total += rl[n]["bid"]
    for r in rl:
        name = (await bot.api.users.get(int(r)))[0].first_name
        tt += f'[id{r}|{name}]: –°—Ç–∞–≤–∫–∞: {rl[r]["bid"]} I$ ({round(HMP(total, rl[r]["bid"]), 4)}%).\n'
    await message.answer(f'–ò–≥—Ä–∞ ¬´–†–£–õ–ï–¢–ö–ê¬ª: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–µ–Ω—å–≥–∏!\n–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ:\n{tt}' if tt != "" else "–ò–≥—Ä–∞ ¬´–†–£–õ–ï–¢–ö–ê¬ª: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–µ–Ω—å–≥–∏!\n–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.", keyboard=Keyboard(inline=True).add(Text("–ü–æ—Å—Ç–∞–≤–∏—Ç—å", {"cmd": "rul_bid"}), color=KeyboardButtonColor.POSITIVE))


@bot.on.chat_message(payload={"cmd": "rul_bid"})
async def rul_bid_handler(message: Message):
    if message.from_id not in users:
        create_account(message.from_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É —Å—Ç–∞–≤–∫—É. –ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å!")
    users[message.from_id]["action"] = "chat_bid"


@bot.on.chat_message(text=".–±–∞–ª")
async def get_acc_handler(message: Message):
    if message.reply_message is not None:
        rID = message.reply_message.from_id
    else:
        rID = None
    ID = message.from_id
    if rID is not None and rID in users:
        await message.answer(f"üë§ [id{rID}|{(await bot.api.users.get(rID))[0]. first_name}]:\nüí∞ I$: {users[rID]['I$']}.\nüéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö I$: {users[rID]['bonusI$']}.\nüìû I$ Starter Server: {users[rID]['inventory']['I$ Starter Server']}.\nüì± I$ Mining Standart: {users[rID]['inventory']['I$ Mining Standart']}.\nüíª I$ Pro Server: {users[rID]['inventory']['I$ Pro Server']}.\nüñ•Ô∏è I$ Station: {users[rID]['inventory']['I$ Station']}.")
    elif rID not in users and rID is not None:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
    elif ID in users:
        await message.answer(f"üë§ [id{ID}|{(await bot.api.users.get(ID))[0]. first_name}]:\nüí∞ I$: {users[ID]['I$']}.\nüéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö I$: {users[ID]['bonusI$']}.\nüìû I$ Starter Server: {users[ID]['inventory']['I$ Starter Server']}.\nüì± I$ Mining Standart: {users[ID]['inventory']['I$ Mining Standart']}.\nüíª I$ Pro Server: {users[ID]['inventory']['I$ Pro Server']}.\nüñ•Ô∏è I$ Station: {users[ID]['inventory']['I$ Station']}.")
    else:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.")


@bot.on.chat_message()
async def chat_messags_handler(message: Message):
    global rl
    ID = message.from_id
    if message.from_id not in users:
        create_account(message.from_id)
    if users[ID]["action"] == "chat_bid":
        try:
            count = int(message.text)
            assert count > 0
        except Exception:
            await message.answer("üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            users[ID]["action"] = ""
            save()
            return
        if users[ID]["bonusI$"] >= count:
            users[ID]["bonusI$"] -= count
            if str(ID) not in rl:
                rl[str(ID)] = {"bid": count}
            else:
                rl[str(ID)]["bid"] += count
                users[ID]["action"] = ""
                save()
                open("JSON/Roulette.json", "w").write(dumps(rl))
                await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {count} I$ –∫ –í–∞—à–µ–π —Å—Ç–∞–≤–∫–µ!")
                return
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} I$!")
        elif users[ID]["I$"] >= count:
            users[ID]["I$"] -= count
            if str(ID) not in rl:
                rl[str(ID)] = {"bid": count}
            else:
                rl[str(ID)]["bid"] += count
                users[ID]["action"] = ""
                save()
                open("JSON/Roulette.json", "w").write(dumps(rl))
                await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {count} I$ –∫ –í–∞—à–µ–π —Å—Ç–∞–≤–∫–µ!")
                return
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} I$!")
        else:
            await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$.")
            users[ID]["action"] = ""
            save()
            return
        users[ID]["action"] = ""
        save()
        open("JSON/Roulette.json", "w").write(dumps(rl))
        if len(rl) == 2:
            await asyncio.sleep(50)
            await message.answer("‚åõ –ò—Ç–æ–≥–∏ —Ä—É–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!")
            await asyncio.sleep(10)
            total = 0
            for n in rl:
                total += rl[n]["bid"]
            num = randint(1, 1000000) / 10000
            total_t = 0
            for r in rl:
                if total_t < HMP(total, rl[r]["bid"]) + total_t > num:
                    name = (await bot.api.users.get(int(r)))[0].first_name
                    users[int(r)]["bonusI$"] += (total / 1.05) if not (total / 1.05).is_integer else int(total / 1.05)
                    await message.answer(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏: [id{r}|{name}]!\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –í–∞—à–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –±—ã–ª –≤—ã—Å–ª–∞–Ω –í–∞–º –≤ –õ–°.")
                    try:
                        await bot.api.messages.send(peer_id=int(r), message=f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä—É–ª–µ—Ç–∫—É!\nüíµ –í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {total / 1.05 if not (total / 1.05).is_integer else int(total / 1.05)} I$.\n–ö–æ–º–∏—Å—Å–∏—è: 5%.", random_id=0)
                    except VKAPIError[901]:
                        pass
                    rl = dict()
                    open("JSON/Roulette.json", "w").write(dumps(rl))
                    save()
                    return
                total_t += HMP(total, rl[r]["bid"])


@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    ID = event.object.user_id
    if ID in users:
        users[ID]["bonusI$"] += 1500
        save()
        try:
            await bot.api.messages.send(peer_id=ID, message="üë• –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã –¥–∞—Ä–∏–º –í–∞–º 1500 I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.", random_id=0)
        except VKAPIError[901]:
            pass


@bot.on.raw_event(GroupEventType.GROUP_LEAVE, dataclass=GroupTypes.GroupLeave)
async def group_leave_handler(event: GroupTypes.GroupLeave):
    ID = event.object.user_id
    if ID in users:
        users[ID]["bonusI$"] -= 1500
        save()
        try:
            await bot.api.messages.send(peer_id=ID, message="üë§ –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å–Ω—è—Ç—å 1500 I$ —Å –í–∞—à–µ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...", random_id=0)
        except VKAPIError[901]:
            pass


@bot.on.raw_event(GroupEventType.LIKE_ADD, dataclass=GroupTypes.LikeAdd)
async def like_add_handler(event: GroupTypes.LikeAdd):
    ID = event.object.liker_id
    object = event.object.object_id
    obj_type = str(event.object.object_type)
    if ID in users and object not in users[ID]["likes"] and obj_type == "CallbackLikeAddRemoveObjectType.POST":
        users[ID]["bonusI$"] += 50
        users[ID]["likes"].append(object)
        save()
        try:
            await bot.api.messages.send(peer_id=ID, message="+50 I$ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ –ª–∞–π–∫.", random_id=0)
        except VKAPIError[901]:
            pass


@bot.on.raw_event(GroupEventType.LIKE_REMOVE, dataclass=GroupTypes.LikeRemove)
async def like_remove_handler(event: GroupTypes.LikeRemove):
    ID = event.object.liker_id
    object = event.object.object_id
    obj_type = str(event.object.object_type)
    if ID in users and object in users[ID]["likes"] and obj_type == "CallbackLikeAddRemoveObjectType.POST":
        users[ID]["bonusI$"] -= 50
        users[ID]["likes"].append(object)
        save()
        try:
            await bot.api.messages.send(peer_id=ID, message="-50 I$ —Å –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞.", random_id=0)
        except VKAPIError[901]:
            pass


bot.run_forever()
